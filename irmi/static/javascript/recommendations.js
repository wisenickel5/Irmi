const recommendations = recommendationsData;
const token = accessToken;
const user_id = userId;

function displayRecommendations() {
    const recommendationsContainer = document.getElementById('recommendations');

    const allSongs = [];

    for (const genre in recommendations) {
        if (recommendations[genre].length > 0) {
            const genreSection = document.createElement('div');
            genreSection.classList.add('recommendation-section');

            const genreTitle = document.createElement('h2');
            genreTitle.classList.add('genre-title');
            genreTitle.textContent = genre;
            genreSection.appendChild(genreTitle);

            recommendations[genre].forEach(song => {
                const songElement = document.createElement('div');
                songElement.classList.add('song');
                songElement.textContent = `${song.name} - ${song.artists.map(artist => artist.name).join(', ')}`;
                genreSection.appendChild(songElement);

                allSongs.push(song);
            });

            const createPlaylistButton = document.createElement('button');
            createPlaylistButton.classList.add('button');
            createPlaylistButton.textContent = 'Create Playlist';
            createPlaylistButton.onclick = () => createPlaylist(recommendations[genre], `Recommended ${genre} songs`);
            genreSection.appendChild(createPlaylistButton);

            recommendationsContainer.appendChild(genreSection);
        }
    }

    // Add a section for creating a playlist from all recommended songs
    const allSongsSection = document.createElement('div');
    allSongsSection.classList.add('recommendation-section');

    const allSongsTitle = document.createElement('h2');
    allSongsTitle.classList.add('genre-title');
    allSongsTitle.textContent = 'All Recommended Songs';
    allSongsSection.appendChild(allSongsTitle);

    const createPlaylistButton = document.createElement('button');
    createPlaylistButton.classList.add('button');
    createPlaylistButton.textContent = 'Create Playlist';
    createPlaylistButton.onclick = () => createPlaylist(allSongs, 'All recommended songs');
    allSongsSection.appendChild(createPlaylistButton);

    recommendationsContainer.appendChild(allSongsSection);
}

async function createPlaylist(songs, playlistName) {
    console.log(`Create playlist with name: ${playlistName}`);

    const accessToken = 'your_access_token'; // Replace with your actual access token
    const userId = 'your_user_id'; // Replace with the user's ID who will create the playlist

    try {
        // Create a new playlist
        const playlistResponse = await fetch(`https://api.spotify.com/v1/users/${user_id}/playlists`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                name: playlistName,
                description: 'Generated by your application',
                public: false
            })
        });

        const playlistData = await playlistResponse.json();
        const playlistId = playlistData.id;

        // Add the songs to the playlist
        const trackUris = songs.map(song => song.uri).join(',');

        await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                uris: trackUris
            })
        });

        // Open the Spotify application and direct the user to the created playlist
        window.open(`spotify:playlist:${playlistId}`, '_blank');
    } catch (error) {
        console.error('Error creating playlist:', error);
    }
}


displayRecommendations();
